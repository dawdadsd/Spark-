services:
  # ============= 开发环境服务 =============
  spark_clean:
    container_name: spark_clean # 指定容器名称
    build:
      context: .  # 构建上下文为当前目录
      dockerfile: Dockerfile  # 使用实际的 Dockerfile 文件名
      target: development    # 可以添加这行来指定使用 development 阶段
    volumes:
      - .:/app  # 将当前目录挂载到容器的 /app 目录，实现代码热更新
      - ~/.m2:/root/.m2  # 防止本地 node_modules 覆盖容器内的
    ports:
      - "8080:8080"  # 端口映射，左边是主机端口，右边是容器端口
    environment:
      - SERVER_PORT=8080
      - JAVA_OPTS=-Xmx512m
      - SPRING_PROFILES_ACTIVE=dev
    networks:
      - app-network
    depends_on:
      - mysql
      - redis
    command: ["./mvnw", "spring-boot:run"]  # 使用 Spring Boot 开发模式运行
  # ============= 生产环境服务 =============
  spark_clean_prod:
    container_name: spark_clean_prod
    build:
      context: .
      dockerfile: Dockerfile
      target: build    # 使用 Dockerfile 中定义的 production 阶段
    ports:
      - "8081:8081"
    environment:
      - SERVER_PORT=8081
      - SPRING_PROFILES_ACTIVE=prod  # 使用 Spring Boot 的环境变量
    networks:
      - app-network
    depends_on:
      - mysql
      - redis
  # ============= MySQL 服务 =============
  mysql:
    image: mysql:8.0  # 使用 MySQL 8.0 镜像
    environment:
      MYSQL_ROOT_PASSWORD: 123456  # 设置 root 密码
      MYSQL_DATABASE: analyseserver  # 创建默认数据库
    ports:
      - "3307:3306"  # 修改这里：将主机端口改为 3307
    volumes:
      - mysql-data:/var/lib/mysql  # 数据持久化存储
    networks:
      - app-network

  # ============= Redis 服务 =============
  redis:
    image: redis:alpine  # 使用轻量级 Redis 镜像
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data  # Redis 数据持久化存储
    networks:
      - app-network

# 定义命名卷，用于数据持久化
volumes:
  mysql-data:  # MySQL 数据卷
  redis-data:  # Redis 数据卷

# 添加网络配置
networks:
  app-network:
    driver: bridge